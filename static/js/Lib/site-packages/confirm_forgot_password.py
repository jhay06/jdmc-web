import jquery

from browser import window,alert
jq=window.jQuery
from validations.base_validation import BaseValidation
import json
class ConfirmForgotPassword:
    
    def __init__(self) -> None:
        self.on_success=None
        validators={"validate":['email_address'],"validator":"validate"}
        jq.post("/modules/api_cable/get_validator_cable.php",validators,self.validator_ready).fail(self.validator_failed)
        self.base_validator=None
    def validator_ready(self,res,status,xhr):
        if status=='success':
            try:
                result=json.loads(res)
                if result['status']=='success':
                    self.open_cable(has_validator=True,validator=result['data'])
                else:
                    alert(result['message'])
            except:
                alert('Could not connect to server')
    def open_cable(self,has_validator=False,validator=[]):
        if not has_validator:
            alert('Connection to the server was not established')
            return False
        self.base_validator=BaseValidation(validator)
        #jq('button[name=change_password]').click(lambda e,base_validator=BaseValidation(validator):self.save_changes_click(e,base_validator))
    def save_changes_click(self,email_address=None):
        
        if self.base_validator is None:
            alert('Connection to the server was not established')
            return False
      
        if not email_address:
            alert('Please input your email_address')
            return False
        valid_email=self.base_validator.validate('email_address',email_address)
        if valid_email is not None:
            alert(valid_email)
            return False
        data={
            'forgot_password':'ok',
            'email_address':email_address
        }
        jq.post('/modules/api_cable/forgot_password_cable.php',data
            ,self.change_password_con_ok
        ).fail(self.change_password_con_failed)
        
    def change_password_con_ok(self,res,status,xhr):
        if status=='success':
            try:
                res_data=json.loads(res)
                if res_data['status']=='success':
                    alert('A message has been sent to your email address, Please go to your email inbox/spam to check the instruction')
                    if(self.on_success !=None):
                        self.on_success()
                else:
                    alert(res_data['message'])
            except:
                alert('Unknown error, Plase try again')
    
    def change_password_con_failed(self,res):
        alert('Connection to the server not established')
    def validator_failed(self,res):
        self.open_cable()
    
    def click_change_password(self,e):
        e.preventDefault()
        