import jquery
from browser import window,alert, confirm
jq=window.jQuery
from utils.loader import Loader
from tutorials.delete_tutorial import DeleteTutorial,DeleteTutorialResponse
from utils.pagination import Pagination, PaginationChangeRequest, PaginationLoad
from tutorials.video_card import VideoCard
import json
import datatables
class GetTutorialList:
    def __init__(self,datatable_element) -> None:
        self.cable='/modules/api_cable/get_tutorial_list_cable.php'
        self.datatable_element= datatable_element
        self.current_table= jq(self.datatable_element).DataTable()
        self.loader=Loader()
    
    def delete_confirm(self,e):
        target=jq(e.target)
        conf=confirm('Delete Tutorial {video_title} ?'.format(video_title=target.attr('video_title')))
        if conf:
            api_delete=DeleteTutorial()
            api_delete.on_load(self.delete_tutorial_response)
            self.loader.show_loader()
            api_delete.process_delete(int(target.attr('video_id')))
    def delete_tutorial_response(self,prod_res:DeleteTutorialResponse):
        alert(prod_res.message)
        self.loader.close_loader()
        if prod_res.status == 'success':
            self.loader.show_loader()
            window.location.reload()
        
    def delete_button_load(self):
        jq('.delete_tutorial').unbind('click')
        jq('.delete_tutorial').bind('click',self.delete_confirm)
    def datatable_finish(self,e,x):
        self.delete_button_load()
        self.loader.close_loader()
    def on_loaded_data(self,res,status,xhr):
        if status=='success':
            try:
                js=json.loads(res)
                if js['status'] == 'success':
                    self.current_table.destroy()
                    data=js['data']
                    i=0
                    list=[]
                    for x in data:
                        x_data=[]
                        x_data.append("<div class='div_td'>{item}</div>".format(item= i+1))
                        x_data.append("<div class='div_td'>{item}</div>".format(item= x['youtube_id']))
                        x_data.append("<div class='div_td'>{item}</div>".format(item= x['video_title']))
                        x_data.append( "<div class='div_td'>{item}</div>".format(item= x['youtube_link']))
                        edit_link="<a href='/tutorials/{youtube_id}/edit'><img src=\"static/images/edit.png\"></a>".format(youtube_id = x['youtube_id'])
                        delete_link="<a href='#' video_id='{video_id}' video_title='{video_title}' class='delete_tutorial'>&times;</a>".format(video_id=x['video_id'], video_title=x['video_title'])
                        div_actions="<div class='action_button'>{edit_link} &nbsp; {delete_link} </div>".format(edit_link= edit_link,
                        delete_link= delete_link)

                        x_data.append("<div class='div_td'>{item}</div>".format(item= div_actions))
                        list.append(x_data)
                        i+=1
                    self.current_table=jq(self.datatable_element).DataTable({
                        'data':list
                    })
                    self.current_table.on('draw',self.datatable_finish)
                    self.current_table.draw()
                else:
                    alert(js['message'])
            except:
                alert('Unknown error, Please try again')
        else:
            alert('Connection to the server not established')
    
    def on_error_load(self,res,status,xhr):
        self.loader.close_loader()
        alert('Connection to the server not established')
    
    def load(self):
        data={
            'get_tutorial':'ok'
        }
        self.loader.show_loader()
        jq.post(self.cable,data,self.on_loaded_data).fail(self.on_error_load)


class GetTutorialListGallery:
    def __init__(self, element_content, element_pagination=None) -> None:
        self.cable='/modules/api_cable/get_tutorial_list_cable.php'
        self.element=jq(element_content)
        self.element_pagination=None
        if element_pagination is not None:
            self.element_pagination=element_pagination
        self._pagination:Pagination=Pagination(self.element_pagination)
        self._pagination.on_load(self.page_load_complete)
        self._pagination.on_page_click(self.page_click)
        self.start_page=1
        self.limit_page=10
        self.page_load_ok=False

        self.loader=Loader()
    def page_click(self,res:PaginationChangeRequest):
        self.start_page=res.request_page
        self.load_data(True)
    def page_load_complete(self,res:PaginationLoad):
    
        if res.page_load:
           
            self.page_load_ok=True
    def video_card_load_complete(self,video_card:VideoCard,video_list,pagination_res={}):
        self.loader.close_loader()
        for x in video_list:
          
            card=jq(video_card.create_card(x['video_title'],x['youtube_id']))
            #print(card)
            print(card.__dict__)
            jq(self.element[0]).append(card)
        if self.element_pagination is not None:
            if not self.page_load_ok:
               
                self._pagination.start_page(self.start_page,self.limit_page,pagination_res['total_count'])

    def on_load_ok(self,res,status,xhr):
        self.loader.close_loader()
        if status=='success':
            try:
                js=json.loads(res)
                if js['status'] == 'success':
                    video= VideoCard()
                    #self.loader.show_loader()
                    pagination={}
                    if 'pagination' in js:
                        pagination=js['pagination']
                  
                    video.get_video_card(lambda s, video_list=js['data'], pagination_res=pagination:self.video_card_load_complete(s,video_list,pagination_res))
                else:
                    alert(js['message'])
            except Exception as err:
                print(err)
                alert('Parse error')
        else:
            alert('Connection to the server not established')
    def on_load_failed(self,res,status,xhr):
        self.loader.close_loader()
        alert('Connection to the server not established')
    def load_data(self,has_pagination=False,):
        self.element.html("")
        self.loader.show_loader()
        data={
            'get_tutorial':'ok',
            'has_pagination':has_pagination,
            'page':self.start_page,
            'limit':self.limit_page
        }
        
        
        jq.post(self.cable, data, self.on_load_ok).fail(self.on_load_failed)
      
    def load(self):
        self.load_data(True)
      