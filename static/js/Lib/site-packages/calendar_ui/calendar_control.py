import jquery
from calendar import monthrange
from browser import window,alert
jq=window.jQuery

class CalendarControl:
    current_calendar=None
    @staticmethod
    def get_current_calendar():
        return CalendarControl.current_calendar

    def get_current_range(self):
        return {
            'from_range':'{year}-{month}-{day}'.format(
                year=self.__loaded_year,
                month=self.__loaded_month,
                day=1
            ),
            'to_range':'{year}-{month}-{day}'.format(
                year=self.__loaded_year,
                month=self.__loaded_month,
                day=self.range[1]
            )
        }

    def __init__(self,element_name , load_month, year):
        jq(element_name).ready(self.element_ready)
        self.el=jq(element_name)
        self.range=monthrange(year,load_month)
        self.__loaded_month=load_month
        self.__loaded_year=year
        self.__change_cb=None
        self.__date_click=None
        self.__monthName={
                1:"January",
                2:"February",
                3:"March",
                4:"April",
                5:"May",
                6:"June",
                7:"July",
                8:"August",
                9:"September",
                10:"October",
                11:"November",
                12:"December"
        }
        self.process_month(load_month,year)
    def on_change(self,cb):
        self.__change_cb=cb

    def process_month(self,load_month,loaded_year):
        self.__loaded_month=load_month
        self.__loaded_year=loaded_year
        prev_month=1
        next_month=3
        prev_year=loaded_year
        next_year=loaded_year
        if load_month == 1:
            prev_month=12
            prev_year-=1
        else:
            prev_month=load_month-1
        
        if load_month == 12:
            next_month=1
            next_year+=1
        else:
            next_month=load_month+1
        
        active_date="{month} {year}".format(month=self.__monthName[load_month], year=loaded_year)
        jq(jq('.calendar .month.active')[0]).text(active_date).attr('item',load_month).attr('year',loaded_year)
        jq(jq('.calendar .month.prev')[0]).text(self.__monthName[prev_month]).attr('item',prev_month).attr('year',prev_year)
        jq(jq('.calendar .month.next')[0]).text(self.__monthName[next_month]).attr('item',next_month).attr('year',next_year)
        jq('.calendar .month.next, .calendar .month.prev').unbind('click')
        jq('.calendar .month.next, .calendar .month.prev').bind('click',self.change_month)
        CalendarControl.current_calendar=self
    
    def change_month(self,e):
        target=jq(e.target)
        item=target.attr('item')
        year=target.attr('year')

        self.range=monthrange(int(year),int(item))
        self.process_month(int(item),int(year))
        self.load_calendar()
        if self.__change_cb is not None:
            self.__change_cb(self)

    def load_calendar(self):
        data=[]
        if self.range is not None:
            start_day=self.range[0]
            total_day=self.range[1]

            if start_day == 6:
                start_day=0
            else:
                start_day+=1
            
            
            current_day=start_day
            sub_data=[]
            if current_day > 0:
                c=0
                while c < current_day:
                    sub_data.append(None)
                    c+=1

            i=0

            month= str(self.__loaded_month)
            if len(month) == 1:
                month='0'+month

       
            while i <= total_day:
                if i == (total_day):
                    sub_data.append(total_day)
                    if len(sub_data) < 7:
                        while len(sub_data) < 7:
                            sub_data.append(None)
                        
                        data.append(sub_data)
                    elif len(sub_data) > 7:
                        while(len(sub_data) > 7):
                            sub_data.pop()
                    
                        data.append(sub_data)
                        break
                    else:

                        data.append(sub_data)
                        break
                elif (i+start_day)% 7 == 0:
                    if len(sub_data) == 7:
                        data.append(sub_data)
                        sub_data=[]
                if sub_data is None:
                    sub_data=[]
                i+=1
                current_day+=1
                if i < total_day:
                    sub_data.append(i)
                
                
               
                
            
            calendar_days=jq(self.el.find('.calendar-days'))
            calendar_days.html("")
            for x in data:
               
                row=jq("<div class='row'></div>")
                for y in x:
                    myday=str(y)
                    if len(myday) == 1:
                        myday='0'+myday
                    if y is not None:
                      
                        col=jq("<div class='col-md date-link' date='{year}-{month}-{mday}'>{day}</div>".format(
                            year=self.__loaded_year,
                            month=month,
                            day=y,
                            mday=myday  
                        ))
                    else:
                        col=jq("<div class='col-md'></div>")
                    row.append(col)
                calendar_days.append(row)
            dlink=jq(calendar_days.find('.date-link'))
            dlink.unbind('click')
            dlink.bind('click',self.date_link_click)
    def date_link_click(self,e):
        target=jq(e.target)
        date=target.attr('date')
        if self.__date_click is not None:
            self.__date_click(self,target,date)
       
    def on_date_click(self,cb):
        self.__date_click=cb
    def element_ready(self,e):
        self.load_calendar()
        
