
import jquery
from browser import window,alert
jq=window.jQuery
import base64
class FileModel:
    def __init__(self):
        self.file_type=None
        self.file_name=None
        self.file_content=None
        self.file_temp_content=[0]
class FileUploadReader:
    def __init__(self,element) -> None:
        self.element=element
        self.element.unbind('change')
        self.element.bind('change',self.input_on_change)
        self.mimes={
            'image/png':'.png',
            'image/jpeg':'.jpg',
            'image/jpg':'.jpg',
            'image/gif':'.gif',
            'image/bmp':'.bmp'
        }
        self.__onload=None
        self.file_model:FileModel=None
    
    def on_file_load(self,cb):
        self.__onload=cb

    def input_on_change(self,ev):
        file= ev.target.files[0]
       
       
        file_reader=window.FileReader.new()
        file_reader.onload=self.file_reader_onload(file)
        file_reader.readAsDataURL(file)
    def file_reader_onload(self,the_file):
        return self.file_return_func

    def file_return_func(self,e):
        base64_file=e.target.result.split('base64,')[1]
        b_len=len(window.atob(base64_file))
      
        file=self.element[0].files[0]
       
        file_type=None
        try:
            file_type=self.mimes[file.type]
        except:
            alert('File is not yet supported at the moment')
            return
        self.file_model=FileModel()
        self.file_model.file_type=file_type
        self.file_model.file_name=file.name
        self.file_model.file_temp_content=[0]*b_len
        self.file_model.file_content=base64_file
        if self.__onload is not None:
            self.__onload(self.element,self.file_model)

    def get_file_model(self):
        return self.file_model
    
    def clear_file_model(self):
        self.file_model=FileModel()


        
           
           