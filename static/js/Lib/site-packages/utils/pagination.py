
import jquery
from browser import window,alert
jq=window.jQuery
class PaginationChangeRequest:
    def __init__(self, request_page=0) -> None:
        self.request_page=request_page

class PaginationLoad:
    def __init__(self, page_load=False,reason=None) -> None:
        self.page_load= page_load
        self.reason=reason
    

class Pagination:
    def __init__(self,element) -> None:
        self.element=jq(element)
        self.controller="/pagination"
        self.__onpage_click=None
        self.__onload_done=None

    def on_load(self,cb):
        self.__onload_done=cb

    def _call_on_load(self,page_load,reason):
       
        if self.__onload_done is not None:
            self.__onload_done(PaginationLoad(
                page_load=page_load,
                reason=reason
            ))
    def _page_click(self,e):

        target=jq(e.target)
        
    
        page=target.attr('page')
        
        if self.__onpage_click is not None:
            self.__onpage_click(PaginationChangeRequest(
                request_page=page
            ))
    def load_ok(self,res,status,xhr):
        
        if status=='success':
            self.element.html("")
            self.element.html(res)
            
            jq(self.element.find(".pagination-page")).unbind("click")
            jq(self.element.find(".pagination-page")).bind("click",self._page_click)
            self._call_on_load (True,"Load ok")

        else:
            self._call_on_load(False,'Unknown error, Please try again')


    def load_failed(self,res,status,xhr):
        self._call_on_load(False,"Connection to the server not established")
    def start_page(self,current_page, limit, total_count):
        data={
            "page":current_page,
            "limit":limit,
            "total_count":total_count
        }
        jq.get(self.controller,data,self.load_ok).fail(self.load_failed)

    def on_page_click(self,cb):
        self.__onpage_click=cb