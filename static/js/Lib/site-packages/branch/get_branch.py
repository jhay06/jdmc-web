import jquery
from browser import window,alert
jq=window.jQuery
import json
class BranchListControl:
    def __init__(self,select_control):
        self.el=jq(jq(select_control)[0])
        self.el.ready(self.element_ready)
        self.api='modules/api_cable/get_branches_cable.php'
        self.branch_loaded=[]
        self.el.change(self.selected_branch_change)
        self.__cb_change=None
    
    def selected_branch_change(self,e):
        selected_branch=self.el.val()
        index=-1
        while index < len(self.branch_loaded):
            index+=1
            try:
                current_branch=self.branch_loaded[index]
           
                if current_branch['branch_code']==selected_branch:
                    
                    if self.__cb_change is not None:
                        self.__cb_change(index,current_branch)
                        return
                    break
            except Exception as err:
                
                self.__cb_change(index,None)
                break
    def trigger_branch(self):
        self.selected_branch_change(None)
    def element_ready(self,ev):
        d={
            'get_branches':'ok'
        }
        jq.post(self.api,d, self.branches_list).fail(self.loaded_failed)
    
    def branches_list(self,res,status,xhr):
        
        if status=='success':
            try:
                jdata=json.loads(res)
                if jdata['status'] == 'success':
                   
                    branches=jdata['data']
                    if self.el is not None:
                        self.el.html("")
                        op=jq("<option value=0>Choose Branch</option>")
                        self.el.append(op)
                        self.branch_loaded=branches
                        for x in branches:
                            op=jq("<option value='{branch_code}'>{branch_name}</option>".format(**x))
                            self.el.append(op)
                else:
                    alert(jdata['message'])
                
            except:
                alert('Unknown error')
    def loaded_failed(self,res,status,xhr):
        alert('Connection error')
    
    def is_changed(self,cb):
       self.__cb_change=cb