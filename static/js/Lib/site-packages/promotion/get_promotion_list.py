import jquery
from browser import window, alert,confirm
jq=window.jQuery
import json
import datatables
from promotion.delete_promotion import DeletePromotion, DeletePromotionResponse
from utils.loader import Loader
from utils.pagination import Pagination,PaginationChangeRequest, PaginationLoad
class GetPromotionList:
    def __init__(self,datatable_element) -> None:
        self.cable='/modules/api_cable/get_promotion_list_cable.php'
        self.datatable_element= datatable_element
        self.current_table= jq(self.datatable_element).DataTable()
        self.loader=Loader()
    
    def delete_confirm(self,e):
        
        target=jq(e.target)
        conf=confirm('Delete Promotion {promotion_name} ?'.format(promotion_name=target.attr('promotion_name')))
        if conf:
            api_delete=DeletePromotion()
            api_delete.on_load(self.delete_promotion_response)
            self.loader.show_loader()
            api_delete.process_delete(int(target.attr('promotion_id')))
    def delete_promotion_response(self,prod_res:DeletePromotionResponse):
        alert(prod_res.message)
        self.loader.close_loader()
        if prod_res.status == 'success':
            self.loader.show_loader()
            window.location.reload()
        
    def delete_button_load(self):
        jq('.delete_promotion').unbind('click')
        jq('.delete_promotion').bind('click',self.delete_confirm)
    def datatable_finish(self,e,x):
       
        self.delete_button_load()
        self.loader.close_loader()
    def on_loaded_data(self,res,status,xhr):
        if status=='success':
            try:
                js=json.loads(res)
                if js['status'] == 'success':
                    self.current_table.destroy()
                    data=js['data']
                    i=0
                    list=[]
                    for x in data:
                        x_data=[]
                        x_data.append("<div class='div_td'>{item}</div>".format(item= i+1))
                        image_data="data:{file_content_type};base64, {file_content}".format(
                            file_content_type=x['file_content_type'],
                            file_content= x['file_content']
                        )
                        img_src="<img src='{image_data}' width='25px' height='25px' alt='product_img'/>".format(image_data = image_data)

                        #x_data.append("<div class='div_td'>{item}</div>".format(item= img_src))
                        x_data.append( "<div class='div_td'>{item}</div>".format(item= x['image_id']))
                        x_data.append("<div class='div_td'>{item}</div>".format( item= x['promotion_name']))
                        x_data.append("<div class='div_td'>{item}</div>".format(item= x['status']))
                        edit_link="<a href='/promotions/{image_id}/edit'><img src=\"static/images/edit.png\"></a>".format(image_id = x['image_id'])
                        delete_link="<a href='#' promotion_id='{promotion_id}' promotion_name='{promotion_name}' class='delete_promotion'>&times;</a>".format(promotion_id=x['promotion_id'], promotion_name=x['promotion_name'])
                        div_actions="<div class='action_button'>{edit_link} &nbsp; {delete_link} </div>".format(edit_link= edit_link,
                        delete_link= delete_link)

                        x_data.append("<div class='div_td'>{item}</div>".format(item= div_actions))
                        list.append(x_data)
                        i+=1
                    self.current_table=jq(self.datatable_element).DataTable({
                        'data':list
                    })
                    self.current_table.on('draw',self.datatable_finish)
                    self.current_table.draw()
                else:
                    alert(js['message'])
            except:
                alert('Unknown error, Please try again')
        else:
            alert('Connection to the server not established')
    
    def on_error_load(self,res,status,xhr):
        self.loader.close_loader()
        alert('Connection to the server not established')
    
    def load(self):
        data={
            'get_promotion':'ok'
        }
        self.loader.show_loader()
        jq.post(self.cable,data,self.on_loaded_data).fail(self.on_error_load)

