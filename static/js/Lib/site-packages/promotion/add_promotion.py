import jquery
from browser import window,alert, confirm
import json
from validations.base_validation import BaseValidation
from utils.file_reader import FileUploadReader
from utils.loader import Loader
jq=window.jQuery
class AddPromotion:
    def __init__(self,file_model:FileUploadReader) -> None:
        self.file_model:FileUploadReader=file_model
        self.loader= Loader()
        validators={"validate":['promotion_name','promotion_description','image_file'],"validator":"validate"}
        jq.post("/modules/api_cable/get_validator_cable.php",validators,self.validator_ready).fail(self.validator_failed)
    def validator_ready(self,res,status,xhr):
        if status=='success':
            try:
                
                result=json.loads(res)
                if result['status']=='success':
                    self.open_cable(has_validator=True,validator=result['data'])
                else:
                    self.loader.close_loader()
                    alert(result['message'])
            except:
                self.loader.close_loader()
                alert('Could not connect to server')
    def validator_failed(self,res):
        self.open_cable()
    
    def open_cable(self,has_validator=False,validator=[]):
        self.loader.close_loader()
        if not has_validator:
            alert('Connection to the server was not established')
            return False
        jq("button[name=add_promotion]").unbind("click")
        jq('button[name=add_promotion]').bind("click",lambda e,base_validator=BaseValidation(validator):self.save_changes_click(e,base_validator))
    
    def save_changes_click(self,e,base_validator:BaseValidation=None):

        e.preventDefault()
        if base_validator is None:
            alert('Connection to the server was not established')
            return False
      
        promotion_name=jq("input[name=promotion_name").val()
        select_status=jq("select[name=promotion_status] option:selected").val()
        promotion_description=jq("input[name=promotion_description]").val()
        file_model=self.file_model.get_file_model()
        
      
        if not promotion_name:
            alert('Please input promotion name')
            return
        if int(select_status) == 0:
            alert('Please choose promotion status')
            return
        if not promotion_description:
            alert('Please input promotion description')
            return
        promotion_name_validate=base_validator.validate('promotion_name',promotion_name)
        promotion_desc_validate=base_validator.validate('promotion_descriotion',promotion_description)
        image_file_validate=base_validator.validate('image_file',file_model.__dict__)
        validated=[ promotion_name_validate, promotion_desc_validate, image_file_validate]
        for x in validated:
            if x is not None:
                alert(x)
                return
        data_val={
            'add_promotion':'ok',
            'promotion_name':promotion_name,
            'promotion_status':int(select_status),
            'promotion_description':promotion_description,
            'image_file':{
                "file_type":file_model.file_type,
                "file_name":file_model.file_name,
                "file_content":file_model.file_content
            }

        }
        conf=confirm('Add this promotion?')
        if conf:
            self.loader.show_loader()
            jq.post('/modules/api_cable/add_promotion_cable.php',data_val,self.add_promotion_con_ok).fail(self.add_promotion_con_failed)

    def add_promotion_con_failed(self,res,status,xhr):
        self.loader.close_loader()
        alert('Connection to server not established')
        #loader.close_loader()

    def add_promotion_con_ok(self,res,status,xhr):
        self.loader.close_loader()
        if status=='success':
            result=json.loads(res)
            if result['status'] != 'success':
                alert(result['message'])
                #loader.close_loader()
                return False
            else:
                alert(result['message'])
                self.loader.show_loader()
                window.location.href='/promotions'
        else:
            alert('Connection error')
            #loader.close_loader()
 
