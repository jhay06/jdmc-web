from calendar import month_name, monthrange
import jquery
from browser import window,html,alert
import bootstrap
from datetime import datetime, timedelta
jq=window.jQuery
import json
from appointment.add_appointment import AddAppointment

class AppointmentCalendar:
    def __init__(self,calendar_name):
        self.add_appointment=None
        self.calendar_name=calendar_name
        self.__appointment_date=None
        self.branch=None
        self.from_range=None
        self.to_range=None
        self.__appointment_list=[]
        self.on_range_change=None
        self.__monthName={
                1:"January",
                2:"February",
                3:"March",
                4:"April",
                5:"May",
                6:"June",
                7:"July",
                8:"August",
                9:"September",
                10:"October",
                11:"November",
                12:"December"
        }
        self.__dayName={
            0:"Mon",
            1:"Tue",
            2:"Wed",
            3:"Thu",
            4:"Fri",
            5:"Sat",
            6:"Sun"
        }
        jq('.schedule .appointment').unbind('click')
        jq('.schedule .appointment').bind('click',self.choosed_date)
        
        jq('#add_appointment').on('hidden.bs.modal',self.add_appointment_modal_hidden)
        jq(".appointment-header .prev_date_btn").unbind('click')
        jq('.appointment-header .next_date_btn').unbind('click')
        jq('.appointment-header .prev_date_btn').bind('click',lambda e, action='prev':self.navi_prev_next(e,action))
        jq('.appointment-header .next_date_btn').bind('click',lambda e, action='next':self.navi_prev_next(e,action))
        jq('.month-name .month').unbind('click')
        jq('.month-name .month').bind('click',self.month_change)
    def on_range(self,cb):
        self.on_range_change=cb
    
    def month_change(self,e):
        target=jq(e.target)
        month=target.attr('month')
        year=target.attr('year')
        day='01'
        if len(month) < 2:
            month='0'+month
        from_range="{year}-{month}-{day}".format(
            year=year,
            month=month,
            day=day
        )
        start_range=datetime.strptime(from_range,"%Y-%m-%d")
        if self.on_range_change is not None:
            self.on_range_change(start_range)
    def navi_prev_next(self,e,action):
        if action == 'prev':
            start_range=datetime.strptime(self.from_range,'%Y-%m-%d')
            start_range=start_range - timedelta(days=15)
            if self.on_range_change is not None:
                self.on_range_change(start_range)
        elif action == 'next':
            start_range=datetime.strptime(self.to_range,'%Y-%m-%d')
         
            start_range=start_range+timedelta(days=1)
         
            if self.on_range_change is not None:
                self.on_range_change(start_range)
    def int_time_to_string(self,time_data):
        am_pm='AM'
        print(time_data)
        if time_data >= 1200:
            am_pm='PM'
        
        time_str=str(time_data)
        if len(time_str) < 4:
            time_str='0'+time_str
        
        return time_str[0:2]+":"+time_str[2:4]+" "+am_pm
            
    def chosen_branch(self,branch):
        self.branch=branch
        
    

    def add_appointment_modal_hidden(self,e):
        add_appointment=jq('#add_appointment')
        choose_from_time=jq(add_appointment.find('select[name=choose_from_time]')[0])
        choose_to_time=jq(add_appointment.find('select[name=choose_to_time')[0])
        patient_name=jq(add_appointment.find('input[name=patient_name]')[0])
        contact_no=jq(add_appointment.find('input[name=contact_no]')[0])
        email_address=jq(add_appointment.find('input[name=email_address]')[0])
        branch_name=jq(add_appointment.find('.branch_name'))
        date_of_appointment=jq(add_appointment.find('.date_of_appointment'))
        choose_from_time.val('0')
        choose_to_time.val('0')
        patient_name.val('')
        email_address.val('')
        contact_no.val('')
        branch_name.text('')
        date_of_appointment.text('')
        self.add_appointment=None

    def time_chooser_select(self,e):
       
        current_chooser=jq(e.target).attr('name')
        start_slot=None
        end_slot=None
        if 'choose_from_time' in current_chooser:
            target=jq(e.target)
            selected=jq(target.find('option:selected'))
            item=int(selected.attr('item'))
            if item > 0:
   
                self.reset_disabled(jq('select[name=choose_to_time]'))
                self.disable_option_from_select(jq('select[name=choose_to_time]'),item,_from=item)
          
        elif 'choose_to_time' in current_chooser:
            target=jq(e.target)

            selected=jq(target.find('option:selected'))
            item=int(selected.attr('item'))
            if item > 0:
                self.reset_disabled(jq('select[name=choose_from_time]'))
                self.disable_option_from_select(jq('select[name=choose_from_time]'),item,_from=item,incremental=True)
       
        choose_from_time=jq('select[name=choose_from_time] option:selected')
        choose_to_time=jq('select[name=choose_to_time] option:selected')
        if int(choose_from_time.val()) > 0:
            start_slot=choose_from_time.val()
        
        if int(choose_to_time.val()) > 0:
            end_slot=choose_to_time.val()
        if self.add_appointment is not None:
            
            self.add_appointment.chosen_slot(start_slot,end_slot)
    def reset_disabled(self,select_element):
        option_disabled=jq(select_element.find('option:disabled'))
        print(option_disabled.length)
        option_disabled.removeAttr('disabled')
    def disable_option_from_select(self,select_element,val,_from=-1,incremental=False):
  
        options=jq(select_element.find("option"))
        if incremental:
            while _from < options.length:
                el=jq(options[_from])
                item=int(el.attr('item'))
                if item >= _from:
                    el.attr('disabled','disabled')
                _from+=1
        else:
            while _from > 0:
                el=jq(options[_from])
                item=int(el.attr('item'))
                if item <=_from:
                    el.attr('disabled','disabled')
                _from-=1


    def add_appointment_modal_show(self,month,day,year,from_time,to_time,branch='Please choose a branch'):
       
        add_appointment=jq('#add_appointment')
        choose_from_time=jq(add_appointment.find('select[name=choose_from_time]')[0])
        choose_from_time.val(from_time) 
    
        choose_to_time=jq(add_appointment.find('select[name=choose_to_time')[0])
        choose_to_time.val(to_time)
  
        
      
        patient_name=jq(add_appointment.find('input[name=patient_name]')[0])
        contact_no=jq(add_appointment.find('input[name=contact_no]')[0])
        email_address=jq(add_appointment.find('input[name=email_address]')[0])
        branch_name=jq(add_appointment.find('.branch_name'))
        date_of_appointment=jq(add_appointment.find('.date_of_appointment'))
        name_month=self.__monthName[month]
       
        date_of_appointment.text('{month} {day}, {year}'.format(month=name_month,day=day,year=year))
        branch_name.text(branch)
        self.add_appointment=AddAppointment(branch=self.branch,appointment_date=self.__appointment_date)

        choose_from_time.unbind('change')
        choose_from_time.bind('change',self.time_chooser_select)
        choose_from_time.change()
        choose_to_time.unbind('change')

        choose_to_time.bind('change',self.time_chooser_select)
        choose_to_time.change()
      
    def choosed_date(self,e):
        if self.branch == None:
            alert('Please select a branch first!')
            return
        clicked_index=e.target.attributes.getNamedItem('index').value
        item=jq(e.target.parent.parent)
        
        dates=jq(item.find('.dates')[0])
        calendar_day=jq(dates.find('.calendar-day')[clicked_index])
        choosed_month=calendar_day.attr('month')
        choosed_day=calendar_day.attr('day')
        choosed_year=calendar_day.attr('year')
        target=jq(e.target)
        parent=jq(e.target.parent)
        from_time=parent.attr("from").replace(":","")
        to_time=parent.attr("to").replace(":","")
        if len(from_time) < 4:
            from_time="0"+from_time
        
        if len(to_time) < 4:
            to_time="0"+to_time
        notavailable=target.hasClass("notavailable")
        if notavailable:
            jq("#show_appointment").modal("show")
            self.show_appointment(json.loads(target.attr('info')),int(choosed_month),int(choosed_day),int(choosed_year))
        else:
            self.add_appointment_modal_show(int(choosed_month),int(choosed_day), int(choosed_year),from_time,to_time,branch=self.branch['branch_name'])
            jq('#add_appointment').modal('show')
    
    def show_appointment(self,appointment_info,month,day,year):
       
        show_appointment=jq("#show_appointment")
        branch_name=jq(show_appointment.find(".branch_name"))
        branch_name.text(appointment_info['branch_name'])
        ref_no=jq(show_appointment.find(".ref_no"))
        ref_no.text(appointment_info['reference_code'])
        start_time=jq(show_appointment.find(".start_time"))
        
        start_time.text(self.int_time_to_string(int(appointment_info['start_timeslot'])))
        end_time=jq(show_appointment.find(".end_time"))
        end_time.text(self.int_time_to_string(int(appointment_info['end_timeslot'])))
        status=jq(show_appointment.find(".status"))
        if appointment_info['is_cancelled']:
            status.text('Cancelled')
        else:
            status.text('Active')
        patient_name=jq(show_appointment.find(".patient_name"))
        patient_name.text(appointment_info['patient_name'])
        contact_no=jq(show_appointment.find(".contact_no"))
        contact_no.text(appointment_info['patient_contact_no'])
        email_addr=jq(show_appointment.find(".email_address"))
        email_addr.text(appointment_info['email_address'])
        date_of_appointment=jq(show_appointment.find(".date_of_appointment"))
        name_month=self.__monthName[month]

        date_of_appointment.text('{month} {day}, {year}'.format(month=name_month,day=day,year=year))
    def reset_appointment_slot(self):
        appointments=jq('.appointment-calendar .appointment.notavailable')
        if appointments.length > 0:
            ap=0
            while ap < appointments.length:
                appointment=jq(appointments[ap])
                appointment.removeClass('notavailable')
                ap+=1
    def load_appointment_data(self,appointment_list=[]):
        self.reset_appointment_slot()
        self.__appointment_list=appointment_list
        for x in appointment_list:
           
            appointment_date=x['appointment_date']
            res=json.dumps(x)
            d=datetime.strptime(appointment_date,'%Y-%m-%d')
            slot_element=self.get_slot_element(d.year,d.month,d.day,x['start_timeslot'],x['end_timeslot'])
            el=slot_element['element']
        
            for y in el:
                
                start_slot=x['start_timeslot']
                end_slot=x['end_timeslot']
                int_start=int(start_slot)
                int_end=int(end_slot)
                start_slot=start_slot[0:2]+":"+start_slot[2:4]
                end_slot=end_slot[0:2]+":"+end_slot[2:4]
                start_ampm="AM"
                if int_start >= 1200:
                    start_ampm="PM"
                end_ampm="AM"
                if int_end >=1200:
                    end_ampm="PM"
                
                start_slot= start_slot+" "+start_ampm
                end_slot= end_slot+" "+end_ampm
                
                tooltip_txt='<b>Patient</b>: {patient_name} <br/><b>Appointment</b>: {start_slot} - {end_slot}<br/><b>Date</b>: {date}'.format(
                    patient_name=x['patient_name'],
                    start_slot=start_slot,
                    end_slot=end_slot,
                    date=d.strftime(fmt='%B %d, %Y')
                )
                y.addClass('notavailable')
                y.attr('info',res)
                y.attr('data-bs-toggle','popover')
                y.attr('data-content',tooltip_txt)
                y.attr('data-html',True)
            jq('.notavailable').unbind("mouseover mouseleave")
            jq('.notavailable').bind("mouseover mouseleave",self.hover_notavailable)
    
    def hover_notavailable(self,e):
        t=e.type
        target=jq(e.target)
        if e.type == "mouseover":
            target.popover('show')
        else:
            target.popover('hide')
            
    def get_slot_element(self,year,month,day,start_time,end_time):
       
        dates=jq('.appointment-calendar .dates')
        partition=0
        position={
            "partition":-1,
            "column":-1,
            "row":[],
            "element":[]
        }
        while partition < dates.length:
            current_partition=jq(dates[partition])
            children=current_partition.children()
            index=0
            while index < children.length:
                day_index=jq(children[index])
                day_partition=int(day_index.attr('day'))
                year_partition=int(day_index.attr('year'))
                month_partition=int(day_index.attr('month'))
                if (year_partition == year and
                    month_partition ==month and
                    day_partition == day
                
                 ):
                    position['partition']=partition
                    position['column']=index
                    break
                index+=1
            partition+=1
        partitions=jq('.appointment-calendar .partition')
        if position['partition'] > -1:
            selected_partition=jq(partitions[position['partition']])
            if selected_partition is not None:
                row_schedule=jq(selected_partition.find('.schedule'))
                row=0
                while row < row_schedule.length:
                    current_row=jq(row_schedule[row])
                    from_row:str=current_row.attr('from')
                    to_row:str=current_row.attr('to')
                    from_row=from_row.replace(':','')
                    to_row=to_row.replace(':','')
                    if int(from_row)>=int(start_time) and int(to_row)<=int(end_time):
                        position['row'].append(row)
                        row_child=current_row.children()
                        position['element'].append(jq(row_child[position['column']]))
                    #position['element']=jq(row_child[position['column']])

                
                    row+=1
        return position
    


    def load_month(self,month,day,year,weekday):

        _m=str(month)
        if len(_m) < 2:
            _m='0'+_m
        _d=str(day)
        if len(_d) < 2:
            _d='0'+_d
        self.from_range="{year}-{month}-{day}".format(year=year,
            month=_m,
            day=_d
        )
     
        from_range=datetime.strptime(self.from_range,'%Y-%m-%d')
      
        to_range=from_range+timedelta(days=14)
        
        self.to_range=to_range.strftime('%Y-%m-%d')
        self.__appointment_date="{year}-{month}-{day}".format(
          year=year,
          month=month,
          day=day
        )
        current_day=self.__dayName[weekday]
        current_year=year
        last_day=day+15
        current_month_index=month
        prev_month_index=-1
        current_month=self.__monthName[month]
        next_month_index=-1
        prev_year=year
        current_year=year
        next_year=year
        if month > 1:
           prev_month_index=month-1
           prev_month=self.__monthName[prev_month_index]
        else:
           prev_month_index=13-month
           prev_year=year-1
           prev_month=self.__monthName[prev_month_index]
        
        if month < 12:
            next_month_index=month+1
            next_month=self.__monthName[next_month_index]
        else:
            next_month_index=(month- len(self.__monthName))+1
            next_year=year+1
            next_month=self.__monthName[next_month_index]
        calendar=jq(self.calendar_name)
        prev_month_el=jq(calendar.find('.prev_month')[0])
        current_month_el=jq(calendar.find('.current_month')[0])
        next_month_el=jq(calendar.find('.next_month')[0])
        if prev_month_el is not None:
            prev_month_el.text(prev_month)
            prev_month_el.attr('year',prev_year)
            prev_month_el.attr('month',prev_month_index)
        if current_month_el is not None:
            current_month_el.text(current_month)
            current_month_el.attr('year',current_year)
            current_month_el.attr('month',current_month_index)
        if next_month_el is not None:
            next_month_el.text(next_month)
            next_month_el.attr('year',next_year)
            next_month_el.attr('month',next_month_index)
        
        i=day
        start=1
        m_range=monthrange(year,month)
        start_day=weekday
        while i < last_day:
            day_name='day'+str(start)
         
            day_name_el=jq(calendar.find('.'+day_name)[0])
            txt=''
            if start_day > 6:
                start_day=0
            
            name_day=self.__dayName[start_day]
            txt=name_day
            loaded_month=current_month_index
            loaded_day=-1
            loaded_year=year
            if i <=m_range[1]:
                loaded_day=i
                txt=txt+'<br/>'+str(i)+'-'+current_month[0:3]
            else:
                if loaded_month == 12:
                    loaded_year+=1
                loaded_day=i-m_range[1]
                loaded_month=next_month_index
                txt=txt+'<br/>'+str(loaded_day)+'-'+next_month[0:3]
            

            day_name_el.html(txt)
            day_name_el.attr('day',str(loaded_day))
            day_name_el.attr('month',str(loaded_month))
            day_name_el.attr('year',str(loaded_year))
            start_day+=1
            start+=1
            i+=1