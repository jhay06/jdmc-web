import jquery
from browser import alert, window
jq=window.jQuery
from validations.base_validation import BaseValidation
import json
from utils.loader import Loader
loader=Loader()
class UpdateAppointmentResponse:
    def __init__(self, status=None, message=None, *args, **kwargs) -> None:
        self.status=status
        self.message=message

class UpdateAppointment:
    def update_appointment_con_failed(self,res,status,xhr):
        
        if self.__cb is not None:
            self.__cb(
                UpdateAppointmentResponse(
                    status='error',
                    message='Connection to the server was not established'
                )
            )
        loader.close_loader()

    def update_appointment_con_ok(self,res,status,xhr):
        if status=='success':
            result=json.loads(res)
            if result['status'] != 'success':
                if self.__cb is not None:
                    self.__cb(
                        UpdateAppointmentResponse(
                            **result
                        )
                    )
                loader.close_loader()
                return False
            else:
                if self.__cb is not None:
                    
                    self.__cb(
                        UpdateAppointmentResponse(
                            status='success',
                            message='Update successful'
                        )
                    )
                #window.location.reload()
        else:
            if self.__cb is not None:
                self.__cb(
                    UpdateAppointmentResponse(
                        status='error',
                        message='Connection error'
                    )
                )
            loader.close_loader()

    def save_changes_click(self,e,base_validator:BaseValidation=None):
        e.preventDefault()
        if base_validator is None:
            if self.__cb is not None:
                self.__cb(UpdateAppointmentResponse(
                    status='error',
                    message='Connection to the server was not established'
                ))
            return False
        patient_name=jq('input[name=patient_name]').val()
        patient_contact_no=jq('input[name=contact_no]').val()
        email_address=jq('input[name=email_address]').val()
        err_msg=None
        if not patient_name:
            err_msg='Please type the patient name'
            
        
        if not patient_contact_no:
            err_msg="Please type the patient contact number"
            
        
        if not email_address:
            err_msg="Please type the patient email address"
      
        if not self.branch:
            err_msg='Please choose branch first'
            
        
        if not self.appointment_date:
            err_msg='Please choose appointment date'
        
        if not self.start_slot:
            err_msg="Please choose start time slot"
            

        if not self.end_slot:
            err_msg="Please choose end time slot"

       
           
      
        patient_name_validate=base_validator.validate('patient_name',patient_name)
        patient_contact_no_validate=base_validator.validate('contact_number',patient_contact_no)
        patient_email_addr_validate=base_validator.validate('email_address',email_address)
        validators=[patient_name_validate, patient_contact_no_validate, patient_email_addr_validate]
        for x in validators:
            if x is not None:
                err_msg=x
                break
        if err_msg is not None:
            if self.__cb is not None:
                self.__cb(
                    UpdateAppointmentResponse(
                        status='failed',
                        message=err_msg
                    )
                )
            return

        data_val={
            'update_appointment':'ok',
            'reference_code':self.reference_code,
            'patient_name':patient_name,
            'patient_contact_no':patient_contact_no,
            'email_address':email_address,
            'branch_code':self.branch['branch_code'],
            'branch_name':self.branch['branch_name'],
            'appointment_date':self.appointment_date,
            'start_timeslot':self.start_slot,
            'end_timeslot':self.end_slot

        }
        loader.show_loader()
        jq.post('/modules/api_cable/update_appointment_cable.php',data_val,self.update_appointment_con_ok).fail(self.update_appointment_con_failed)
    
    def open_cable(self,has_validator=False,validator=[]):
        if not has_validator:
            if self.__cb is not None:
                self.__cb(
                    UpdateAppointmentResponse(
                        status='error',
                        message='Connection to the server was not established'
                    )
                )
            return False
        jq("button[name=save_appointment]").unbind("click")
        jq('button[name=save_appointment]').bind("click",lambda e,base_validator=BaseValidation(validator):self.save_changes_click(e,base_validator))
    def validator_ready(self,res,status,xhr):
        if status=='success':
            try:
                result=json.loads(res)
                if result['status']=='success':
                    self.open_cable(has_validator=True,validator=result['data'])
                else:
                    if self.__cb is not None:
                        self.__cb(
                            UpdateAppointmentResponse(
                                **result
                            )
                        )
            except:
                if self.__cb is not None:
                    self.__cb(
                        UpdateAppointmentResponse(
                            status='error',
                            message='Connection error, Please try again'
                        )
                    )
    def validator_failed(self,res):
        self.open_cable()
    
    def chosen_slot(self,start_slot,end_slot):
        self.start_slot=start_slot
        self.end_slot=end_slot

    def set_reference_code(self,reference_code):
        self.reference_code=reference_code
    
    def on_update_save(self,cb):
        self.__cb=cb

    def __init__(self, branch, appointment_date):
        self.branch=branch
        self.appointment_date=appointment_date
        self.start_slot=None
        self.end_slot=None
        self.__cb=None
        self.reference_code=None
        
        validators={"validate":['patient_name','contact_number','email_address'],"validator":"validate"}
        jq.post("/modules/api_cable/get_validator_cable.php",validators,self.validator_ready).fail(self.validator_failed)

