import jquery
import bootstrap
from browser import window, alert,confirm
jq=window.jQuery
from datetime import datetime
import json
from utils.loader import Loader

from appointment.cancel_appointment import CancelAppointment,CancellationResponse
from appointment.update_appointment import UpdateAppointment, UpdateAppointmentResponse
class AppointmentDashboard:
    def __init__(self) -> None:
        self.__selected=[]
        jq('.app_action').unbind('click')
        jq('.app_action').bind("click",self.show_modal_action)
        self.update_handler:UpdateAppointment=None
    
    def return_only_reference_codes(self):
        items=[]
        for x in self.__selected:
            
            items.append(x['ref_code'])
        return items
    
    def show_modal_action(self,e):
        target=jq(e.target)
        action=target.attr('action')
        if len(self.__selected) == 0:
            alert('Please choose an item')
            return
            
        if action == 'update' or action=='view':
            modal_target=target.attr('data-target')
           

            if len(self.__selected) > 1:
                if action=='update':
                    alert('Only 1 item is allowed to edit')
                    return
                elif action=='view':
                    alert("Only 1 item is allowed to view")
                    return

            if action=='view':
                try:
                    item_info=self.__selected[0]['item']
                    self.load_info_show_appointment(item_info)
                    
                    modal=jq(modal_target)
                    modal.modal('show')
                except Exception as err:
                    print(err)
            elif action=='update':
                try:
                    item_info=self.__selected[0]['item']
                    self.load_info_update_appointment(item_info)
                    modal=jq(modal_target)
                    modal.modal('show')

                except Exception as err:
                    print(err)

        elif action=='cancel':
            conf=confirm('Are you sure that you want to cancel checked items ?');
            if conf:
                items=self.return_only_reference_codes()
                ca=CancelAppointment(items)
                loader=Loader()
                loader.show_loader()
                ca.process(self.cancellation_response)
            
        else:
            alert('Unknown action')
    
    def cancellation_response(self,cr):
        
        loader=Loader()
        loader.close_loader()
        if cr.status == 'success':
            alert(cr.message)
            window.location.reload()
        else:
            alert(cr.message)
    
    def time_chooser_select(self,e):
       
        current_chooser=jq(e.target).attr('name')
        start_slot=None
        end_slot=None
        if 'choose_from_time' in current_chooser:
            target=jq(e.target)
            selected=jq(target.find('option:selected'))
            item=int(selected.attr('item'))
            if item > 0:
   
                self.reset_disabled(jq('select[name=choose_to_time]'))
                self.disable_option_from_select(jq('select[name=choose_to_time]'),item,_from=item)
          
        elif 'choose_to_time' in current_chooser:
            target=jq(e.target)

            selected=jq(target.find('option:selected'))
            item=int(selected.attr('item'))
            if item > 0:
                self.reset_disabled(jq('select[name=choose_from_time]'))
                self.disable_option_from_select(jq('select[name=choose_from_time]'),item,_from=item,incremental=True)
       
        choose_from_time=jq('select[name=choose_from_time] option:selected')
        choose_to_time=jq('select[name=choose_to_time] option:selected')
        if int(choose_from_time.val()) > 0:
            start_slot=choose_from_time.val()
        
        if int(choose_to_time.val()) > 0:
            end_slot=choose_to_time.val()
       
        if self.update_handler is not None:
           self.update_handler.chosen_slot(start_slot,end_slot)

    def reset_disabled(self,select_element):
        option_disabled=jq(select_element.find('option:disabled'))
        print(option_disabled.length)
        option_disabled.removeAttr('disabled')

    def disable_option_from_select(self,select_element,val,_from=-1,incremental=False):
  
        options=jq(select_element.find("option"))
        if incremental:
            while _from < options.length:
                el=jq(options[_from])
                item=int(el.attr('item'))
                if item >= _from:
                    el.attr('disabled','disabled')
                _from+=1
        else:
            while _from > 0:
                el=jq(options[_from])
                item=int(el.attr('item'))
                if item <=_from:
                    el.attr('disabled','disabled')
                _from-=1

    def update_response(self,res:UpdateAppointmentResponse):
       
        if res.status=='success':
            alert(res.message)
            window.location.reload()
        else:
            alert(res.message)
    def load_info_update_appointment(self,info):
        self.update_handler=UpdateAppointment(
            {
                'branch_code':info['branch_code'],
                'branch_name':info['branch_name']
            },
            info['appointment_date']
        )
        self.update_handler.set_reference_code(info['reference_code'])
        self.update_handler.on_update_save(self.update_response)
        update_info=jq("#add_appointment")
        branch_name=jq(update_info.find('.branch_name'))
        date_of_appointment=jq(update_info.find('.date_of_appointment'))
        choose_from_time=jq(update_info.find('select[name=choose_from_time]'))
        choose_to_time=jq(update_info.find('select[name=choose_to_time]'))
        patient_name=jq(update_info.find('input[name=patient_name]'))
        patient_contact_no=jq(update_info.find('input[name=contact_no]'))
        email_address=jq(update_info.find('input[name=email_address]'))
        branch_name.text(info['branch_name'])
        appointment_date=info['appointment_date']
        appoint_sp=appointment_date.split(' ')
        appointment_date=appoint_sp[0]
        dt=datetime.strptime(appointment_date, '%Y-%m-%d')
        appointment_date=dt.strftime(fmt="%B %d, %Y")

        date_of_appointment.text(appointment_date)
        choose_from_time.val(info['start_timeslot'])
        choose_to_time.val(info['end_timeslot'])
        patient_name.val(info['patient_name'])
        patient_contact_no.val(info['patient_contact_no'])
        email_address.val(info['email_address'])

        choose_from_time.unbind('change')
        choose_to_time.unbind('change')
        choose_from_time.bind('change',self.time_chooser_select)
        choose_to_time.bind('change',self.time_chooser_select)
        choose_from_time.change()
        choose_to_time.change()


    def load_info_show_appointment(self,info):
        show_info=jq("#show_appointment")
        branch_name=jq(show_info.find('.branch_name'))
        date_of_appointment=jq(show_info.find('.date_of_appointment'))
        ref_no=jq(show_info.find('.ref_no'))
        start_time=jq(show_info.find('.start_time'))
        end_time=jq(show_info.find('.end_time'))
        status=jq(show_info.find('.status'))
        patient_name=jq(show_info.find('.patient_name'))
        contact_no=jq(show_info.find('.contact_no'))
        email_address=jq(show_info.find('.email_address'))
        branch_name.text(info['branch_name'])
        appointment_date=info['appointment_date']
        appoint_sp=appointment_date.split(' ')
        appointment_date=appoint_sp[0]
        dt=datetime.strptime(appointment_date, '%Y-%m-%d')
        appointment_date=dt.strftime(fmt="%B %d, %Y")

        date_of_appointment.text(appointment_date)
        ref_no.text(info['reference_code'])
        start_timeslot=info['start_timeslot']
        end_timeslot=info['end_timeslot']
        start_ampm='AM'
        end_ampm='AM'
        if int(start_timeslot) >=1200:
            start_ampm="PM"
        if int(end_timeslot) >=1200:
            end_timeslot="PM"

        start_timeslot=start_timeslot[0:2]+':'+start_timeslot[2:4]+' '+start_ampm
        end_timeslot=end_timeslot[0:2]+':'+end_timeslot[2:4]+' '+end_ampm
        start_time.text(start_timeslot)
        end_time.text(end_timeslot)
        status_text='Active'
        if info['is_cancelled']:
            status_text='Cancelled'
        status.text(status_text)
        patient_name.text(info['patient_name'])
        contact_no.text(info['patient_contact_no'])
        email_address.text(info['email_address'])

    def reload_checkbox(self,name_of_cbx):
        cbx=jq(name_of_cbx)
        cbx.unbind('change')
        cbx.bind('change',self.check_change)
    
    def remove_selected(self,ref_code):
        index=0
    
        for x in self.__selected:

            if x['ref_code']==ref_code:
            
                self.__selected.pop(index)
                break
            index+=1

    def check_change(self,e):
        target=jq(e.target)
        item=json.loads(target.attr('item'))
        ref_code=target.val()
        if target.prop('checked'):
            self.__selected.append({
                'ref_code':ref_code,
                'item':item
            })
        else:
            self.remove_selected(ref_code)
    


        