from utils.file_reader import FileUploadReader
from validations.base_validation import BaseValidation
from utils.file_reader import FileUploadReader,FileModel
import jquery
from browser import window,alert,confirm
import json
jq=window.jQuery
from utils.loader import Loader

class UpdateProduct:
    def __init__(self) -> None:
        self.upload_new_file=False
        self.upload_reader=None
        self.loader=Loader()
        validators={"validate":['product_code','product_name','product_description','image_file'],"validator":"validate"}
        jq.post("/modules/api_cable/get_validator_cable.php",validators,self.validator_ready).fail(self.validator_failed)
    def add_upload_reader(self,upload_reader:FileUploadReader):
        self.upload_reader=upload_reader
    def validator_ready(self,res,status,xhr):
        if status=='success':
            try:
                
                result=json.loads(res)
                if result['status']=='success':
                    self.open_cable(has_validator=True,validator=result['data'])
                else:
                    self.loader.close_loader()
                    alert(result['message'])
            except:
                self.loader.close_loader()
                alert('Could not connect to server')
    def validator_failed(self,res):
        self.open_cable()
    def open_cable(self,has_validator=False,validator=[]):
        self.loader.close_loader()
        if not has_validator:
            alert('Connection to the server was not established')
            return False
        jq("button[name=add_service]").unbind("click")
        jq('button[name=add_service]').bind("click",lambda e,base_validator=BaseValidation(validator):self.save_changes_click(e,base_validator))
    
    def save_changes_click(self,e,base_validator:BaseValidation=None):

        e.preventDefault()
     
        if base_validator is None:
            alert('Connection to the server was not established')
            return False
        service_id=jq("input[name=service_id]").val()

        product_code=jq("input[name=prod_code]").val()
        product_name=jq("input[name=prod_name").val()
        select_class=jq("select[name=prod_class] option:selected").val()
        product_description=jq("textarea[name=prod_desc]").val()
        file_model=FileModel()
        if self.upload_new_file:
            try:
                file_model=self.upload_reader.get_file_model()
            except:
                alert('Please choose product')
                return
        if not product_code:
            alert('Please input product code')
            return
        if not product_name:
            alert('Please input product name')
            return
        if int(select_class) == 0:
            alert('Please choose product class')
            return
        if not product_description:
            alert('Please input product description')
            return
        product_code_validate=base_validator.validate('product_code',product_code)
        product_name_validate=base_validator.validate('product_name',product_name)
        product_desc_validate=base_validator.validate('product_descriotion',product_description)
        image_file_validate=None
        if self.upload_new_file:
            image_file_validate=base_validator.validate('image_file',file_model.__dict__)
        validated=[product_code_validate, product_name_validate, product_desc_validate]
        for x in validated:
            if x is not None:
                alert(x)
                return
        if self.upload_new_file:
            if image_file_validate is not None:
                alert(image_file_validate)
                return
        image_file={
            "file_type":file_model.file_type,
            "file_name":file_model.file_name,
            "file_content":file_model.file_content
        }
       
        data_val={
            'update_service':'ok',
            'service_id':int(service_id),
            'upload_new_file':self.upload_new_file,
            'product_code':product_code,
            'product_name':product_name,
            'class_id':int(select_class),
            'product_description':product_description,
            'image_file':image_file

        }
        conf=confirm('Update this product? ')
        if conf:
            self.loader.show_loader()
            jq.post('/modules/api_cable/update_service_cable.php',data_val,self.update_service_con_ok).fail(self.update_service_con_failed)

    def update_service_con_failed(self,res,status,xhr):
        self.loader.close_loader()
        alert('Connection to server not established')
        #loader.close_loader()

    def update_service_con_ok(self,res,status,xhr):
        self.loader.close_loader()
        if status=='success':
            result=json.loads(res)
            if result['status'] != 'success':
                alert(result['message'])
                #loader.close_loader()
                return False
            else:
                alert(result['message'])
                product_code=jq("input[name=prod_code]").val()
                self.loader.show_loader()
                window.location.href="/products/{product_code}/edit".format(product_code=product_code)
                
        else:
            alert('Connection error')
            #loader.close_loader()