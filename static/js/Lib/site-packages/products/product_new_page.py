from products.product_class import ProductClass,jq
from browser import alert,confirm
from utils.file_reader import FileUploadReader,FileModel
from validations.file.file_validation import FileValidation
from products.add_product import AddProduct
from products.get_product_list import GetProductList
from products.update_product import UpdateProduct
from utils.loader import Loader
class Product:
    def __init__(self) -> None:
        self.loader=Loader()
    
    def load_product_class(self):
        self.loader.show_loader()
        prod_class= jq('select#prod_class')
        prod_class.html("")
        opt=jq("<option value='0'>Select Class</option>")
        prod_class.append(opt)
     
        def on_load_finish():
            self.loader.close_loader()
            prod_class= jq('select#prod_class') 
            default_val=prod_class.attr('default_val')
           
            prod_class.val(default_val)
        def on_load_select(product):
            prod_class= jq('select#prod_class')  
            try:
                opt="<option value='{class_id}' code='{class_code}'>{class_name}</option>".format(
                    class_id=product['class_id'],
                    class_code=product['class_code'],
                    class_name=product['class_name']
                )
                prod_class.append(opt)

            except Exception as e:
                print(e) 

        def on_error(err):
            alert(err['message'])
        prod_class=ProductClass()
        prod_class.on_load(on_load_select)
        prod_class.on_error(on_error)
        prod_class.on_load_finish(on_load_finish)
        prod_class.get_product_list()
       

    def get_product_list_page(self):
        get_prod_list=GetProductList("#service_dt")
        get_prod_list.load()
    
    def update_product_page(self):
        self.load_product_class()
        update_prod=UpdateProduct()
        def on_file_load(element, file:FileModel):
            if len(file.file_temp_content) < 1000:
                alert('Minimum size of image should be 1kb')
                element.val("")
                return
            if len(file.file_temp_content) > 3000000:
                alert('Image size must not be larger than 3MB')
                element.val("")
                return
        def change_file_click(e,update_prod:UpdateProduct):
            e.preventDefault()
            conf=confirm("Clicking this button will require you to upload new image, Continue?")
            if conf:
                update_prod.upload_new_file=True
                jq('.has_file').addClass('hide')
                jq('#prod_img').removeClass('hide')
                file_upload=FileUploadReader(jq("#prod_img"))
                file_upload.on_file_load(on_file_load)
                update_prod.add_upload_reader(file_upload)
        jq('button.change_file').unbind('click')
        jq('button.change_file').bind('click',lambda e, prod=update_prod:change_file_click(e,prod))
    
    

    def add_product_page(self):
        self.load_product_class()
        def on_file_load(element,file:FileModel):
            if len(file.file_temp_content) < 1000:
                alert('Minimum size of image should be 1kb')
                element.val("")
                return
            if len(file.file_temp_content) > 3000000:
                alert('Image size must not be larger than 3MB')
                element.val("")
                return

       
        file_upload=FileUploadReader(jq('input#prod_img'))
        file_upload.on_file_load(on_file_load)
        add_product=AddProduct(file_upload)

