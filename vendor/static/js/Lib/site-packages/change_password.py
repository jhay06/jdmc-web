import jquery
from browser import alert, window
jq=window.jQuery
from validations.base_validation import BaseValidation
import json
class ChangePassword:
    def change_password_con_failed(self,res,status,xhr):
        alert('Connection to server not established')

    def change_password_con_ok(self,res,status,xhr):
        if status=='success':
            result=json.loads(res)
            if result['status'] != 'success':
                alert(result['message'])
                return False

            else:
                jq('input[name=change_password_ok]').val('true')
                jq('form[name=change_password_form]').submit()
    def save_changes_click(self,e,base_validator:BaseValidation=None):
        e.preventDefault()
        if base_validator is None:
            alert('Connection to the server was not established')
            return False
        username_val=jq('input[name=username]').val()
        old_password_val=jq('input[name=current_password').val()
        new_password_val=jq('input[name=new_password').val()
        confirm_password_val=jq('input[name=confirm_password]').val()
        if not old_password_val:
            alert('Please input your current password')
            return False
        if not new_password_val:
            alert('Please input your desire new password')
            return False
        
        if not confirm_password_val:
            alert('Please confirm your password')
            return False
        
        if new_password_val != confirm_password_val:
            alert('Confirm password does not match to your new password')
            return False
        
        pass_validator_err=base_validator.validate('password',new_password_val)

        if pass_validator_err:
            alert(pass_validator_err)
            return False
        data_val={'username':username_val, 
                'new_password':new_password_val,
                'current_password':old_password_val,
                'confirm_password':confirm_password_val,
                'change_pass':'ok'
        }
        jq.post('/modules/api_cable/change_password.php',data_val,self.change_password_con_ok).fail(self.change_password_con_failed)
    
    def open_cable(self,has_validator=False,validator=[]):
        if not has_validator:
            alert('Connection to the server was not established')
            return False
        jq('button[name=changepass]').click(lambda e,base_validator=BaseValidation(validator):self.save_changes_click(e,base_validator))
    def validator_ready(self,res,status,xhr):
        if status=='success':
            try:
                result=json.loads(res)
                if result['status']=='success':
                    self.open_cable(has_validator=True,validator=result['data'])
                else:
                    alert(result['message'])
            except:
                alert('Could not connect to server')
    def validator_failed(self,res):
        self.open_cable()
    
    def __init__(self):
        validators={"validate":['password'],"validator":"validate"}
        jq.post("/modules/api_cable/get_validator_cable.php",validators,self.validator_ready).fail(self.validator_failed)

